name: Release

on:
  push:
    tags:
      - "v*"

# Add permissions at the top level
permissions:
  contents: write # This is needed for creating releases

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        run: |
          gh release create "${{ github.ref_name }}" \
            --title "Release ${{ github.ref_name }}" \
            --generate-notes
          echo "upload_url=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} | jq -r .upload_url)" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    name: Build and Upload
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: s
            target: x86_64-unknown-linux-gnu
            asset_name: s-linux-amd64
          - os: macos-latest
            artifact_name: s
            target: x86_64-apple-darwin
            asset_name: s-macos-amd64

    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      # AppImage creation steps for Linux
      - name: Create AppImage (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y imagemagick

          # Install appimagetool
          sudo wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O /usr/local/bin/appimagetool
          sudo chmod +x /usr/local/bin/appimagetool

          # Create AppDir structure
          mkdir -p AppDir/usr/{bin,share/applications,share/icons/hicolor/256x256/apps}

          # Copy binary
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} AppDir/usr/bin/

          # Create desktop file
          cat > AppDir/usr/share/applications/s-screen.desktop << EOF
          [Desktop Entry]
          Name=s-screen
          Exec=s
          Icon=s-screen
          Type=Application
          Categories=Utility;
          EOF

          # Create AppRun
          cat > AppDir/AppRun << EOF
          #!/bin/sh
          SELF=\$(readlink -f "\$0")
          HERE=\${SELF%/*}
          export PATH="\${HERE}/usr/bin:\${PATH}"
          exec "\${HERE}/usr/bin/s" "\$@"
          EOF
          chmod +x AppDir/AppRun

          # Create a simple icon (you should replace this with your actual icon)
          convert -size 256x256 xc:transparent -font DejaVu-Sans -pointsize 200 -gravity center -draw "text 0,0 'S'" AppDir/usr/share/icons/hicolor/256x256/apps/s-screen.png

          # Generate AppImage
          ARCH=x86_64 appimagetool AppDir s-screen-${{ github.ref_name }}-x86_64.AppImage

      - name: Upload Release Asset
        run: |
          gh release upload ${{ github.ref_name }} \
            ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}#${{ matrix.asset_name }}

          # Upload AppImage for Linux
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            gh release upload ${{ github.ref_name }} \
              ./s-screen-${{ github.ref_name }}-x86_64.AppImage
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
